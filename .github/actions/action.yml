name: 'DPF Makefile builder action'
description: 'Builds DPF based plugins that use Makefile as build system'
author: 'DISTRHO'

inputs:
  target:
    description: 'Target OS'
    required: true
    default: 'linux'
  debug:
    description: 'Build in debug mode'
    required: false
    default: false
  lto:
    description: 'Enable Link-Time-Optimizations'
    required: false
    default: false
  dpf_path:
    description: 'Relative path to DPF submodule'
    required: false
    default: 'dpf'
  extraargs:
    description: 'Extra arguments to pass into `make`'
    required: false
    default: ''
  faust:
    description: 'Install faust'
    required: false
    default: false
  pawpaw:
    description: 'Install and setup extra libraries'
    required: false
    default: false
  release:
    description: 'Automatically upload releases'
    required: false
    default: true
  postfix:
    description: 'Extra arguments to pass into `ARTIFACT_BASENAME && RELEASE_BASENAME`'
    required: false
    default: ''

outputs:
  release_filename:
    description: "Filename of generated release artifact"
    value: ${{ env.RELEASE_FILENAME }}
  sha8:
    description: "SHA8 of job commit or pull request id"
    value: ${{ github.event.pull_request.number || env.SHA8 }}

runs:
  using: "composite"
  steps:
    - name: Setup env
      shell: bash
      run: |
        echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
        echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $GITHUB_ENV
        echo "HOMEBREW_NO_INSTALL_CLEANUP=1" >> $GITHUB_ENV
        echo "LIBGL_ALWAYS_SOFTWARE=true" >> $GITHUB_ENV
        echo "PAWPAW_CACHE_VERSION=${PAWPAW_CACHE_VERSION:=9}" >> $GITHUB_ENV
        echo "PAWPAW_COMMIT_HASH=${PAWPAW_COMMIT_HASH:=80607a764da0b5a6b2daa4d5dd165beafa0535bc}" >> $GITHUB_ENV
        echo "PAWPAW_SKIP_GLIB=${PAWPAW_SKIP_GLIB:=1}" >> $GITHUB_ENV
        echo "PAWPAW_SKIP_LV2=${PAWPAW_SKIP_LV2:=1}" >> $GITHUB_ENV
    - name: Fix GitHub's mess (detect version)
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        echo "UBUNTU_CODENAME=$(lsb_release -sc)" >> $GITHUB_ENV
        echo "UBUNTU_VERSION=$(lsb_release -sr)" >> $GITHUB_ENV
    - name: Fix GitHub's mess (ubuntu-20.04)
      if: ${{ runner.os == 'Linux' && env.UBUNTU_VERSION == '20.04' }}
      shell: bash
      run: |
        sudo rm /etc/apt/sources.list.d/*.list
        sudo apt-get update -qq
        sudo apt-get purge -yqq git-man libclang* libgbm* libllvm* libmono* libnginx* moby* mono* nginx* perl php* libgdiplus libpcre2-posix3 libselinux1-dev libzip4
        sudo apt-get install -yqq --allow-downgrades autoconf/focal automake/focal build-essential/focal git/focal libgd3/focal libglib2.0-0/focal libglib2.0-dev/focal libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal pkg-config/focal
        sudo apt-get clean
    - name: Fix GitHub's mess (ubuntu-22.04)
      if: ${{ runner.os == 'Linux' && env.UBUNTU_VERSION == '22.04' }}
      shell: bash
      run: |
        sudo rm /etc/apt/sources.list.d/*.list
        sudo apt-get update -qq
        sudo apt-get purge -yqq git-man libclang* libgbm* libllvm* libmono* libnginx* moby* mono* msbuild* nginx* perl php* libgdiplus libpcre2-posix3 libselinux1-dev libzip4
        sudo apt-get install -y --allow-downgrades git/jammy libatomic1/jammy libc6/jammy libgcc-s1/jammy libglvnd0/jammy libstdc++6/jammy
        sudo apt-get clean
    - name: Fix GitHub's mess (ubuntu-24.04)
      if: ${{ runner.os == 'Linux' && env.UBUNTU_VERSION == '24.04' }}
      shell: bash
      run: |
        sudo rm -f /etc/apt/sources.list.d/azure-cli.sources /etc/apt/sources.list.d/microsoft-prod.list
        sudo sed -i 's|Types: deb|Types: deb\nArchitectures: amd64 i386|g' /etc/apt/sources.list.d/ubuntu.sources
        sudo apt-get update -qq
        sudo apt-get purge -yqq git-man clang* libclang* libgbm* libllvm* libmono* libnginx* moby* mono* nginx* perl php* libgdiplus libpcre2-posix3 libselinux1-dev libzip4
        sudo apt-get install -y --allow-downgrades git/noble libatomic1/noble libc6/noble libgcc-s1/noble libstdc++6/noble clang/noble
        sudo apt-get clean

    # setup build options
    - name: Setup build options
      shell: bash
      run: |
        # pawpaw debug
        PAWPAW_DEBUG=0
        [[ "${{ inputs.debug }}" = "true" ]] && PAWPAW_DEBUG=1
        echo "PAWPAW_DEBUG=${PAWPAW_DEBUG}" >> $GITHUB_ENV
        # pawpaw lto
        PAWPAW_SKIP_LTO=1
        [[ "${{ inputs.lto }}" = "true" ]] && PAWPAW_SKIP_LTO=0
        echo "PAWPAW_SKIP_LTO=${PAWPAW_SKIP_LTO}" >> $GITHUB_ENV
        # pawpaw target
        PAWPAW_TARGET="${{ inputs.target }}"
        [[ "${PAWPAW_TARGET}" = "linux" || "${PAWPAW_TARGET}" = "pluginval" || "${PAWPAW_TARGET}" = "plugin-validation" ]] && PAWPAW_TARGET=linux-x86_64
        [[ "${PAWPAW_TARGET}" = "macos" ]] && PAWPAW_TARGET=macos-universal
        [[ "${PAWPAW_TARGET}" = "macos-intel" ]] && PAWPAW_TARGET=macos
        echo "PAWPAW_TARGET=${PAWPAW_TARGET}" >> $GITHUB_ENV
        # make extra args
        echo "MAKE_EXTRA_ARGS=DEBUG=${{ inputs.debug }} HAVE_CAIRO=${{ inputs.pawpaw }} WITH_LTO=${{ inputs.lto }} ${{ inputs.extraargs }}" >> $GITHUB_ENV

    # setup build cache
    - name: Setup build cache
      if: ${{ inputs.pawpaw == 'true' }}
      uses: actions/cache@v3
      with:
        path: ~/PawPawBuilds
        key: pawpaw-${{ inputs.target }}-v${{ env.PAWPAW_CACHE_VERSION }}-${{ inputs.lto }}

    # setup dependencies
    - name: Setup dependencies (linux-arm64)
      if: ${{ inputs.target == 'linux-arm64' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture arm64
        sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
        sudo sed -i "s/deb mirror/deb [arch=amd64] mirror/" /etc/apt/sources.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${{ env.UBUNTU_CODENAME }} main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${{ env.UBUNTU_CODENAME }}-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${{ env.UBUNTU_CODENAME }}-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-arm64.list
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades g++-aarch64-linux-gnu libasound2-dev:arm64 libdbus-1-dev:arm64 libgl1-mesa-dev:arm64 libglib2.0-dev:arm64 liblo-dev:arm64 libx11-dev:arm64 libxcursor-dev:arm64 libxext-dev:arm64 libxrandr-dev:arm64 gperf qemu-user-static
        sudo apt-get clean
    - name: Setup dependencies (linux-armhf)
      if: ${{ inputs.target == 'linux-armhf' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture armhf
        sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
        sudo sed -i "s/deb mirror/deb [arch=amd64] mirror/" /etc/apt/sources.list
        echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports ${{ env.UBUNTU_CODENAME }} main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-armhf.list
        echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports ${{ env.UBUNTU_CODENAME }}-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-armhf.list
        echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports ${{ env.UBUNTU_CODENAME }}-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-armhf.list
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades g++-arm-linux-gnueabihf libasound2-dev:armhf libdbus-1-dev:armhf libgl1-mesa-dev:armhf libglib2.0-dev:armhf liblo-dev:armhf libx11-dev:armhf libxcursor-dev:armhf libxext-dev:armhf libxrandr-dev:armhf gperf qemu-user-static
        sudo apt-get clean
    - name: Setup dependencies (linux-i686)
      if: ${{ inputs.target == 'linux-i386' || inputs.target == 'linux-i686' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades g++-i686-linux-gnu libasound2-dev:i386 libdbus-1-dev:i386 libgl1-mesa-dev:i386 libglib2.0-dev:i386 liblo-dev:i386 libx11-dev:i386 libxcursor-dev:i386 libxext-dev:i386 libxrandr-dev:i386 gperf
        sudo apt-get clean
    - name: Setup dependencies (linux-riscv64)
      if: ${{ inputs.target == 'linux-riscv64' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture riscv64
        sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
        sudo sed -i "s/deb mirror/deb [arch=amd64] mirror/" /etc/apt/sources.list
        echo "deb [arch=riscv64] http://ports.ubuntu.com/ubuntu-ports ${{ env.UBUNTU_CODENAME }} main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-riscv64.list
        echo "deb [arch=riscv64] http://ports.ubuntu.com/ubuntu-ports ${{ env.UBUNTU_CODENAME }}-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-riscv64.list
        echo "deb [arch=riscv64] http://ports.ubuntu.com/ubuntu-ports ${{ env.UBUNTU_CODENAME }}-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-riscv64.list
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades g++-riscv64-linux-gnu libasound2-dev:riscv64 libdbus-1-dev:riscv64 libgl1-mesa-dev:riscv64 libglapi-mesa:riscv64 libglib2.0-dev:riscv64 liblo-dev:riscv64 libx11-dev:riscv64 libxcursor-dev:riscv64 libxext-dev:riscv64 libxrandr-dev:riscv64 gperf qemu-user-static
        sudo apt-get clean
    - name: Setup dependencies (linux-x86_64)
      if: ${{ inputs.target == 'linux-x86_64' || inputs.target == 'linux' }}
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -yqq libasound2-dev libdbus-1-dev libgl1-mesa-dev libglib2.0-dev liblo-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev gperf
        sudo apt-get clean
    - name: Setup dependencies (macOS)
      if: ${{ startsWith(inputs.target, 'macos') }}
      shell: bash
      run: |
        brew uninstall --ignore-dependencies cairo
    - name: Setup dependencies (win32)
      if: ${{ inputs.target == 'win32' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades binutils-mingw-w64-i686 g++-mingw-w64-i686 mingw-w64 gperf wine-stable:i386 xvfb
        sudo apt-get clean
    - name: Setup dependencies (win64)
      if: ${{ inputs.target == 'win64' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -qq
        sudo apt-get install -yqq --allow-downgrades binutils-mingw-w64-x86-64 g++-mingw-w64-x86-64 mingw-w64 gperf wine-stable xvfb
        sudo apt-get clean
    - name: Setup dependencies (pluginval)
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
        # custom repos
        wget https://launchpad.net/~kxstudio-debian/+archive/kxstudio/+files/kxstudio-repos_11.1.0_all.deb
        sudo dpkg -i kxstudio-repos_11.1.0_all.deb
        sudo apt-get update -qq
        # build-deps
        sudo apt-get install -yqq libasound2-dev libdbus-1-dev libgl1-mesa-dev libglib2.0-dev liblo-dev libpulse-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev gperf
        # runtime testing
        sudo apt-get install -yqq carla-git ladspa-sdk lilv-utils lv2-dev lv2lint kxstudio-lv2-extensions mod-lv2-extensions valgrind xvfb
        # cleanup
        sudo apt-get clean

    # install faust (optional)
    - name: Cache faust debs
      if: ${{ inputs.faust == 'true' && runner.os == 'Linux' }}
      uses: actions/cache@v3
      with:
        path: ~/faustdebs
        key: faustdebs
    - name: Install faust (non-macOS)
      if: ${{ inputs.faust == 'true' && runner.os == 'Linux' }}
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -yqq libllvm10 libmicrohttpd12 libsndfile1
        mkdir -p ~/faustdebs
        wget -c -P ~/faustdebs \
          https://launchpad.net/~kxstudio-debian/+archive/ubuntu/toolchain/+files/faust_2.41.1~ds0-0_amd64.deb \
          https://launchpad.net/~kxstudio-debian/+archive/ubuntu/toolchain/+files/faust-common_2.41.1~ds0-0_all.deb \
          https://launchpad.net/~kxstudio-debian/+archive/ubuntu/toolchain/+files/libfaust2_2.41.1~ds0-0_amd64.deb
        sudo dpkg -i ~/faustdebs/*.deb
    - name: Install faust (macOS)
      if: ${{ inputs.faust == 'true' && startsWith(inputs.target, 'macos') }}
      shell: bash
      run: |
        brew install faust

    # build dependencies
    - name: Build dependencies through PawPaw
      if: ${{ inputs.pawpaw == 'true' }}
      shell: bash
      run: |
        git clone https://github.com/brummer10/PawPaw.git
        git -C PawPaw checkout ${{ env.PAWPAW_COMMIT_HASH }}
        echo t1
        ./PawPaw/.github/workflows/bootstrap-deps.sh ${{ env.PAWPAW_TARGET }}
        echo t2
        ./PawPaw/bootstrap-plugins.sh ${{ env.PAWPAW_TARGET }}
        echo t3
        ./PawPaw/bootstrap-jack2.sh ${{ env.PAWPAW_TARGET }}
        echo t4
        ./PawPaw/.cleanup.sh ${{ env.PAWPAW_TARGET }}
        echo t5

    # build plugins
    - name: Build linux arm64 cross-compiled
      if: ${{ inputs.target == 'linux-arm64' }}
      shell: bash
      env:
        CC: aarch64-linux-gnu-gcc
        CXX: aarch64-linux-gnu-g++
        LDFLAGS: -static-libgcc -static-libstdc++
        PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ env.MAKE_EXTRA_ARGS }} features
        make ${{ env.MAKE_EXTRA_ARGS }} -j $(nproc)
    - name: Build linux armhf cross-compiled
      if: ${{ inputs.target == 'linux-armhf' }}
      shell: bash
      env:
        CC: arm-linux-gnueabihf-gcc
        CXX: arm-linux-gnueabihf-g++
        LDFLAGS: -static-libgcc -static-libstdc++
        PKG_CONFIG_PATH: /usr/lib/arm-linux-gnueabihf/pkgconfig
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ env.MAKE_EXTRA_ARGS }} features
        make ${{ env.MAKE_EXTRA_ARGS }} -j $(nproc)
    - name: Build linux i686
      if: ${{ inputs.target == 'linux-i386' || inputs.target == 'linux-i686' }}
      shell: bash
      env:
        CC: i686-linux-gnu-gcc
        CXX: i686-linux-gnu-g++
        CFLAGS: -m32
        CXXFLAGS: -m32
        LDFLAGS: -m32 -static-libgcc -static-libstdc++
        PKG_CONFIG_PATH: /usr/lib/i386-linux-gnu/pkgconfig
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ env.MAKE_EXTRA_ARGS }} features
        make ${{ env.MAKE_EXTRA_ARGS }} -j $(nproc)
    - name: Build linux riscv64 cross-compiled
      if: ${{ inputs.target == 'linux-riscv64' }}
      shell: bash
      env:
        CC: riscv64-linux-gnu-gcc
        CXX: riscv64-linux-gnu-g++
        LDFLAGS: -static-libgcc -static-libstdc++
        PKG_CONFIG_PATH: /usr/lib/riscv64-linux-gnu/pkgconfig
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ env.MAKE_EXTRA_ARGS }} features
        make ${{ env.MAKE_EXTRA_ARGS }} -j $(nproc)
    - name: Build linux x86_64
      if: ${{ inputs.target == 'linux-x86_64' || inputs.target == 'linux' }}
      shell: bash
      env:
        LDFLAGS: -static-libgcc -static-libstdc++
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ env.MAKE_EXTRA_ARGS }} features
        make ${{ env.MAKE_EXTRA_ARGS }} -j $(nproc)
    - name: Build macOS intel
      if: ${{ inputs.target == 'macos-intel' }}
      shell: bash
      env:
        CFLAGS: -arch x86_64 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_8 -DMAC_OS_X_VERSION_MIN_REQUIRED=MAC_OS_X_VERSION_10_8 -mmacosx-version-min=10.8 -stdlib=libc++
        CXXFLAGS: -arch x86_64 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_8 -DMAC_OS_X_VERSION_MIN_REQUIRED=MAC_OS_X_VERSION_10_8 -mmacosx-version-min=10.8 -stdlib=libc++
        LDFLAGS: -arch x86_64 -mmacosx-version-min=10.8 -stdlib=libc++
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ env.MAKE_EXTRA_ARGS }} features
        make ${{ env.MAKE_EXTRA_ARGS }} -j $(sysctl -n hw.logicalcpu)
        ${{ inputs.dpf_path }}/utils/package-osx-bundles.sh
    - name: Build macOS universal
      if: ${{ inputs.target == 'macos' || inputs.target == 'macos-universal' }}
      shell: bash
      env:
        CFLAGS: -arch x86_64 -arch arm64 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_12 -DMAC_OS_X_VERSION_MIN_REQUIRED=MAC_OS_X_VERSION_10_12 -mmacosx-version-min=10.12 -mtune=generic -msse -msse2
        CXXFLAGS: -arch x86_64 -arch arm64 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_12 -DMAC_OS_X_VERSION_MIN_REQUIRED=MAC_OS_X_VERSION_10_12 -mmacosx-version-min=10.12 -mtune=generic -msse -msse2
        LDFLAGS: -arch x86_64 -arch arm64 -mmacosx-version-min=10.12
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ env.MAKE_EXTRA_ARGS }} features
        make ${{ env.MAKE_EXTRA_ARGS }} NOOPT=true -j $(sysctl -n hw.logicalcpu)
        ${{ inputs.dpf_path }}/utils/package-osx-bundles.sh
    - name: Build macOS universal (10.15)
      if: ${{ inputs.target == 'macos-10.15' || inputs.target == 'macos-universal-10.15' }}
      shell: bash
      env:
        CFLAGS: -arch x86_64 -arch arm64 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_15 -DMAC_OS_X_VERSION_MIN_REQUIRED=MAC_OS_X_VERSION_10_15 -mmacosx-version-min=10.15 -mtune=generic -msse -msse2
        CXXFLAGS: -arch x86_64 -arch arm64 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_15 -DMAC_OS_X_VERSION_MIN_REQUIRED=MAC_OS_X_VERSION_10_15 -mmacosx-version-min=10.15 -mtune=generic -msse -msse2
        LDFLAGS: -arch x86_64 -arch arm64 -mmacosx-version-min=10.15
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ env.MAKE_EXTRA_ARGS }} features
        make ${{ env.MAKE_EXTRA_ARGS }} NOOPT=true -j $(sysctl -n hw.logicalcpu)
        ${{ inputs.dpf_path }}/utils/package-osx-bundles.sh
    - name: Build win32 cross-compiled
      if: ${{ inputs.target == 'win32' }}
      shell: bash
      env:
        AR: i686-w64-mingw32-ar
        CC: i686-w64-mingw32-gcc
        CXX: i686-w64-mingw32-g++
        EXE_WRAPPER: wine
        PKG_CONFIG: "false"
        WINEDEBUG: "-all"
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ env.MAKE_EXTRA_ARGS }} features
        make ${{ env.MAKE_EXTRA_ARGS }} -j $(nproc)
    - name: Build win64 cross-compiled
      if: ${{ inputs.target == 'win64' }}
      shell: bash
      env:
        AR: x86_64-w64-mingw32-ar
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        EXE_WRAPPER: wine
        PKG_CONFIG: "false"
        WINEDEBUG: "-all"
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ env.MAKE_EXTRA_ARGS }} features
        make ${{ env.MAKE_EXTRA_ARGS }} -j $(nproc)
    - name: Build plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      env:
        CFLAGS: -g
        CXXFLAGS: -g -DDPF_ABORT_ON_ERROR -DDPF_RUNTIME_TESTING -Wno-pmf-conversions
        LDFLAGS: -static-libgcc -static-libstdc++
        PAWPAW_SKIP_STRIPPING: 1
      run: |
        ${{ inputs.pawpaw == 'true' }} && pushd PawPaw && source local.env ${{ env.PAWPAW_TARGET }} && popd
        make ${{ inputs.extraargs }} features
        make ${{ inputs.extraargs }} NOOPT=true SKIP_STRIPPING=true -j $(nproc)

    # pluginval
    - name: Validate LV2 ttl syntax
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
        lv2_validate \
            /usr/lib/lv2/kx-meta/*.ttl \
            /usr/lib/lv2/kx-control-input-port-change-request.lv2/*.ttl \
            /usr/lib/lv2/kx-programs.lv2/*.ttl \
            /usr/lib/lv2/kx-properties.lv2/*.ttl \
            /usr/lib/lv2/mod.lv2/*.ttl \
            /usr/lib/lv2/modgui.lv2/*.ttl \
            ./bin/*.lv2/*.ttl
    - name: Validate LV2 metadata and binaries
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
        export LV2_PATH=/tmp/lv2-path
        mkdir ${LV2_PATH}
        mv bin/*.lv2 ${LV2_PATH}/
        cp -r /usr/lib/lv2/{atom,buf-size,core,data-access,kx-control-input-port-change-request,kx-programs,kx-properties,mod,modgui,instance-access,midi,parameters,port-groups,port-props,options,patch,presets,resize-port,state,time,ui,units,urid,worker}.lv2 ${LV2_PATH}/
        lv2lint -s lv2_generate_ttl -l ld-linux-x86-64.so.2 -M nopack $(lv2ls)
    - name: Test LADSPA plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          for p in $(ls bin/ | grep ladspa.so); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --keep-debuginfo=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native ladspa ./bin/${p} "" 1>/dev/null; \
              valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --keep-debuginfo=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/bin/analyseplugin ./bin/${p}; \
          done
    - name: Test DSSI plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          for p in $(ls bin/ | grep dssi.so); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --keep-debuginfo=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native dssi ./bin/${p} "" 1>/dev/null; \
          done
    - name: Test LV2 plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          export LV2_PATH=/tmp/lv2-path
          for p in $(lv2ls); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --keep-debuginfo=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native lv2 "" ${p} 1>/dev/null; \
          done
    - name: Test VST2 plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          for p in $(find bin/ | grep -e vst.so -e '.*\.vst/.*\.so'); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --keep-debuginfo=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native vst2 ./${p} "" 1>/dev/null; \
          done
    - name: Test VST3 plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          for p in $(ls bin/ | grep vst3); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --keep-debuginfo=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native vst3 ./bin/${p} "" 1>/dev/null; \
          done
    - name: Test CLAP plugins
      if: ${{ inputs.target == 'pluginval' || inputs.target == 'plugin-validation' }}
      shell: bash
      run: |
          for p in $(find bin/ -type f | grep '.*\.clap$'); do \
              env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                  valgrind \
                  --error-exitcode=255 \
                  --leak-check=full \
                  --track-origins=yes \
                  --keep-debuginfo=yes \
                  --suppressions=${{ inputs.dpf_path }}/utils/valgrind-dpf.supp \
                  /usr/lib/carla/carla-bridge-native clap ./${p} "" 1>/dev/null; \
          done

    # upload artifacts (properties)
    - name: Set sha8
      shell: bash
      run: |
        echo "SHA8=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
    - name: Set basenames
      shell: bash
      run: |
        [[ "${{ inputs.debug }}" = "true" ]] && TARGET_SUFFIX="-debug"
        echo "ARTIFACT_BASENAME=${{ github.event.repository.name }}-${{ inputs.target }}${TARGET_SUFFIX}${{ inputs.postfix }}-${{ github.event.pull_request.number || env.SHA8 }}" >> $GITHUB_ENV
        echo "RELEASE_BASENAME=${{ github.event.repository.name }}${{ inputs.postfix }}-$(echo ${{ github.ref_name }} | sed 's|/|-|g')" >> $GITHUB_ENV

    # create release archive (macOS exception)
    - name: Create release archive (macOS non-release)
      if: ${{ startsWith(inputs.target, 'macos') }}
      shell: bash
      run: |
        if [ "$(ls bin | grep '.app$' | wc -l)" -ge 1 ]; then
          mkdir macos-pkg
          mv bin/*.app macos-pkg/
          mv *-macOS.pkg macos-pkg/${{ github.event.repository.name }}-AudioPlugins.pkg
          hdiutil create ${{ env.ARTIFACT_BASENAME }}.dmg -srcfolder macos-pkg -volname ${{ env.ARTIFACT_BASENAME }} -fs HFS+ -ov
        else
          cp *-macOS.pkg ${{ env.ARTIFACT_BASENAME }}.pkg
        fi

    # upload artifacts (action)
    - name: Upload artifacts (Linux)
      if: ${{ startsWith(inputs.target, 'linux') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_BASENAME }}
        path: |
          bin/*
    - name: Upload artifacts (macOS)
      if: ${{ startsWith(inputs.target, 'macos') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_BASENAME }}
        path: |
          ${{ env.ARTIFACT_BASENAME }}.*
    - name: Upload artifacts (Windows)
      if: ${{ startsWith(inputs.target, 'win') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_BASENAME }}
        path: |
          bin/*
          !bin/*-ladspa.dll
          !bin/*-dssi*

    # create release archive
    - name: Create release archive (Linux)
      if: ${{ startsWith(inputs.target, 'linux') && startsWith(github.ref, 'refs/tags/') && inputs.release == 'true' && inputs.debug == 'false' }}
      shell: bash
      run: |
        tar chJf ${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.tar.xz \
            --transform="s,^bin/,${{ env.RELEASE_BASENAME }}/," \
            bin/*
        echo RELEASE_FILENAME=${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.tar.xz >> $GITHUB_ENV
    - name: Create release archive (macOS)
      if: ${{ startsWith(inputs.target, 'macos') && startsWith(github.ref, 'refs/tags/') && inputs.release == 'true' && inputs.debug == 'false' }}
      shell: bash
      run: |
        if [ -e ${{ env.ARTIFACT_BASENAME }}.dmg ]; then
          mv ${{ env.ARTIFACT_BASENAME }}.dmg ${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.dmg
          echo RELEASE_FILENAME=${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.dmg >> $GITHUB_ENV
        else
          mv ${{ env.ARTIFACT_BASENAME }}.pkg ${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.pkg
          echo RELEASE_FILENAME=${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.pkg >> $GITHUB_ENV
        fi
    - name: Create release archive (Windows)
      if: ${{ startsWith(inputs.target, 'win') && startsWith(github.ref, 'refs/tags/') && inputs.release == 'true' && inputs.debug == 'false' }}
      shell: bash
      run: |
        mv bin ${{ env.RELEASE_BASENAME }}
        zip -r -9 ${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.zip \
            ${{ env.RELEASE_BASENAME }}/* \
            -x ${{ env.RELEASE_BASENAME }}/*-ladspa.dll \
            -x ${{ env.RELEASE_BASENAME }}/*-dssi.dll
        echo RELEASE_FILENAME=${{ env.RELEASE_BASENAME }}-${{ inputs.target }}.zip >> $GITHUB_ENV
    - name: Create release archive (Source)
      if: ${{ startsWith(inputs.target, 'source') }}
      shell: bash
      run: |
        tar chJf ../${{ env.RELEASE_BASENAME }}-src.tar.xz \
            --exclude=".git*" \
            --transform='s,^\.\.,-.-.,' \
            --transform='s,^\.,${{ env.RELEASE_BASENAME }},' \
            --transform='s,^-\.-\.,..,' \
            .
        mv ../${{ env.RELEASE_BASENAME }}-src.tar.xz .
        echo RELEASE_FILENAME=${{ env.RELEASE_BASENAME }}-src.tar.xz >> $GITHUB_ENV

    # upload release archive
    - uses: softprops/action-gh-release@v1
      if: ${{ startsWith(github.ref, 'refs/tags/') && inputs.release == 'true' && inputs.debug == 'false' }}
      with:
        tag_name: ${{ github.ref_name }}
        name: ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          ${{ env.RELEASE_FILENAME }}
